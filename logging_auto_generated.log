--------------------------------------------------------------------------------------------------------------
2020-08-30 14:37:28,796
XXXDEBUGXXX <module>() /home/web_dev/Include-python-script-inside-a-bash-script/logging_filehandler.py[:222] custom_string 
NONE_NO_REQUEST_ABS_PATH        
NONE_NO_REQUEST_METHOD
--------------------------------------------------------------------------------------------------------------

    217: 
    218: #EXAMPLES
    219: cars = ["Ford", "Volvo", "BMW"]
    220: 
    221: # THIS WILL LOG ANYTHING AS STRING
 222***: logger_custom_string.debug(anything(cars,traceback.format_stack(limit=5)))
    223: 
    224: # THIS WILL LOG ANY OBJECT
    225: logger_custom_string.debug(pp_odir(cars,traceback.format_stack(limit=5)))
    226: 
    227: # THIS WILL LOG ALL LOCALS


['Ford', 'Volvo', 'BMW']

  File "<frozen importlib._bootstrap>", line 967, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 677, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 728, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/home/web_dev/Include-python-script-inside-a-bash-script/logging_filehandler.py", line 222, in <module>
    logger_custom_string.debug(anything(cars,traceback.format_stack(limit=5)))


    217: 
    218: #EXAMPLES
    219: cars = ["Ford", "Volvo", "BMW"]
    220: 
    221: # THIS WILL LOG ANYTHING AS STRING
 222***: logger_custom_string.debug(anything(cars,traceback.format_stack(limit=5)))
    223: 
    224: # THIS WILL LOG ANY OBJECT
    225: logger_custom_string.debug(pp_odir(cars,traceback.format_stack(limit=5)))
    226: 
    227: # THIS WILL LOG ALL LOCALS

--------------------------------------------------------------------------------------------------------------
2020-08-30 14:37:28,801
XXXDEBUGXXX <module>() /home/web_dev/Include-python-script-inside-a-bash-script/logging_filehandler.py[:225] custom_string 
NONE_NO_REQUEST_ABS_PATH        
NONE_NO_REQUEST_METHOD
--------------------------------------------------------------------------------------------------------------

    220: 
    221: # THIS WILL LOG ANYTHING AS STRING
    222: logger_custom_string.debug(anything(cars,traceback.format_stack(limit=5)))
    223: 
    224: # THIS WILL LOG ANY OBJECT
 225***: logger_custom_string.debug(pp_odir(cars,traceback.format_stack(limit=5)))
    226: 
    227: # THIS WILL LOG ALL LOCALS
    228: logger_custom_string.debug(pp_odir(locals(),traceback.format_stack(limit=5))) 


[
    "Ford",
    "Volvo",
    "BMW"
]

  File "<frozen importlib._bootstrap>", line 967, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 677, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 728, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/home/web_dev/Include-python-script-inside-a-bash-script/logging_filehandler.py", line 225, in <module>
    logger_custom_string.debug(pp_odir(cars,traceback.format_stack(limit=5)))


    220: 
    221: # THIS WILL LOG ANYTHING AS STRING
    222: logger_custom_string.debug(anything(cars,traceback.format_stack(limit=5)))
    223: 
    224: # THIS WILL LOG ANY OBJECT
 225***: logger_custom_string.debug(pp_odir(cars,traceback.format_stack(limit=5)))
    226: 
    227: # THIS WILL LOG ALL LOCALS
    228: logger_custom_string.debug(pp_odir(locals(),traceback.format_stack(limit=5))) 

--------------------------------------------------------------------------------------------------------------
2020-08-30 14:37:28,802
XXXDEBUGXXX <module>() /home/web_dev/Include-python-script-inside-a-bash-script/logging_filehandler.py[:228] custom_string 
NONE_NO_REQUEST_ABS_PATH        
NONE_NO_REQUEST_METHOD
--------------------------------------------------------------------------------------------------------------

    223: 
    224: # THIS WILL LOG ANY OBJECT
    225: logger_custom_string.debug(pp_odir(cars,traceback.format_stack(limit=5)))
    226: 
    227: # THIS WILL LOG ALL LOCALS
 228***: logger_custom_string.debug(pp_odir(locals(),traceback.format_stack(limit=5))) 


{
    "VerFormatter": "<class 'logging_filehandler.VerFormatter'>",
    "__builtins__": {
        "ArithmeticError": "<class 'ArithmeticError'>",
        "AssertionError": "<class 'AssertionError'>",
        "AttributeError": "<class 'AttributeError'>",
        "BaseException": "<class 'BaseException'>",
        "BlockingIOError": "<class 'BlockingIOError'>",
        "BrokenPipeError": "<class 'BrokenPipeError'>",
        "BufferError": "<class 'BufferError'>",
        "BytesWarning": "<class 'BytesWarning'>",
        "ChildProcessError": "<class 'ChildProcessError'>",
        "ConnectionAbortedError": "<class 'ConnectionAbortedError'>",
        "ConnectionError": "<class 'ConnectionError'>",
        "ConnectionRefusedError": "<class 'ConnectionRefusedError'>",
        "ConnectionResetError": "<class 'ConnectionResetError'>",
        "DeprecationWarning": "<class 'DeprecationWarning'>",
        "EOFError": "<class 'EOFError'>",
        "Ellipsis": "Ellipsis",
        "EnvironmentError": "<class 'OSError'>",
        "Exception": "<class 'Exception'>",
        "False": false,
        "FileExistsError": "<class 'FileExistsError'>",
        "FileNotFoundError": "<class 'FileNotFoundError'>",
        "FloatingPointError": "<class 'FloatingPointError'>",
        "FutureWarning": "<class 'FutureWarning'>",
        "GeneratorExit": "<class 'GeneratorExit'>",
        "IOError": "<class 'OSError'>",
        "ImportError": "<class 'ImportError'>",
        "ImportWarning": "<class 'ImportWarning'>",
        "IndentationError": "<class 'IndentationError'>",
        "IndexError": "<class 'IndexError'>",
        "InterruptedError": "<class 'InterruptedError'>",
        "IsADirectoryError": "<class 'IsADirectoryError'>",
        "KeyError": "<class 'KeyError'>",
        "KeyboardInterrupt": "<class 'KeyboardInterrupt'>",
        "LookupError": "<class 'LookupError'>",
        "MemoryError": "<class 'MemoryError'>",
        "ModuleNotFoundError": "<class 'ModuleNotFoundError'>",
        "NameError": "<class 'NameError'>",
        "None": null,
        "NotADirectoryError": "<class 'NotADirectoryError'>",
        "NotImplemented": "NotImplemented",
        "NotImplementedError": "<class 'NotImplementedError'>",
        "OSError": "<class 'OSError'>",
        "OverflowError": "<class 'OverflowError'>",
        "PendingDeprecationWarning": "<class 'PendingDeprecationWarning'>",
        "PermissionError": "<class 'PermissionError'>",
        "ProcessLookupError": "<class 'ProcessLookupError'>",
        "RecursionError": "<class 'RecursionError'>",
        "ReferenceError": "<class 'ReferenceError'>",
        "ResourceWarning": "<class 'ResourceWarning'>",
        "RuntimeError": "<class 'RuntimeError'>",
        "RuntimeWarning": "<class 'RuntimeWarning'>",
        "StopAsyncIteration": "<class 'StopAsyncIteration'>",
        "StopIteration": "<class 'StopIteration'>",
        "SyntaxError": "<class 'SyntaxError'>",
        "SyntaxWarning": "<class 'SyntaxWarning'>",
        "SystemError": "<class 'SystemError'>",
        "SystemExit": "<class 'SystemExit'>",
        "TabError": "<class 'TabError'>",
        "TimeoutError": "<class 'TimeoutError'>",
        "True": true,
        "TypeError": "<class 'TypeError'>",
        "UnboundLocalError": "<class 'UnboundLocalError'>",
        "UnicodeDecodeError": "<class 'UnicodeDecodeError'>",
        "UnicodeEncodeError": "<class 'UnicodeEncodeError'>",
        "UnicodeError": "<class 'UnicodeError'>",
        "UnicodeTranslateError": "<class 'UnicodeTranslateError'>",
        "UnicodeWarning": "<class 'UnicodeWarning'>",
        "UserWarning": "<class 'UserWarning'>",
        "ValueError": "<class 'ValueError'>",
        "Warning": "<class 'Warning'>",
        "ZeroDivisionError": "<class 'ZeroDivisionError'>",
        "__build_class__": "<built-in function __build_class__>",
        "__debug__": true,
        "__doc__": "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.",
        "__import__": "<built-in function __import__>",
        "__loader__": "<class '_frozen_importlib.BuiltinImporter'>",
        "__name__": "builtins",
        "__package__": "",
        "__spec__": "ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>)",
        "abs": "<built-in function abs>",
        "all": "<built-in function all>",
        "any": "<built-in function any>",
        "ascii": "<built-in function ascii>",
        "bin": "<built-in function bin>",
        "bool": "<class 'bool'>",
        "breakpoint": "<built-in function breakpoint>",
        "bytearray": "<class 'bytearray'>",
        "bytes": "<class 'bytes'>",
        "callable": "<built-in function callable>",
        "chr": "<built-in function chr>",
        "classmethod": "<class 'classmethod'>",
        "compile": "<built-in function compile>",
        "complex": "<class 'complex'>",
        "copyright": "Copyright (c) 2001-2019 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved.",
        "credits": "    Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information.",
        "delattr": "<built-in function delattr>",
        "dict": "<class 'dict'>",
        "dir": "<built-in function dir>",
        "divmod": "<built-in function divmod>",
        "enumerate": "<class 'enumerate'>",
        "eval": "<built-in function eval>",
        "exec": "<built-in function exec>",
        "exit": "Use exit() or Ctrl-D (i.e. EOF) to exit",
        "filter": "<class 'filter'>",
        "float": "<class 'float'>",
        "format": "<built-in function format>",
        "frozenset": "<class 'frozenset'>",
        "getattr": "<built-in function getattr>",
        "globals": "<built-in function globals>",
        "hasattr": "<built-in function hasattr>",
        "hash": "<built-in function hash>",
        "help": "Type help() for interactive help, or help(object) for help about object.",
        "hex": "<built-in function hex>",
        "id": "<built-in function id>",
        "input": "<built-in function input>",
        "int": "<class 'int'>",
        "isinstance": "<built-in function isinstance>",
        "issubclass": "<built-in function issubclass>",
        "iter": "<built-in function iter>",
        "len": "<built-in function len>",
        "license": "Type license() to see the full license text",
        "list": "<class 'list'>",
        "locals": "<built-in function locals>",
        "map": "<class 'map'>",
        "max": "<built-in function max>",
        "memoryview": "<class 'memoryview'>",
        "min": "<built-in function min>",
        "next": "<built-in function next>",
        "object": "<class 'object'>",
        "oct": "<built-in function oct>",
        "open": "<built-in function open>",
        "ord": "<built-in function ord>",
        "pow": "<built-in function pow>",
        "print": "<built-in function print>",
        "property": "<class 'property'>",
        "quit": "Use quit() or Ctrl-D (i.e. EOF) to exit",
        "range": "<class 'range'>",
        "repr": "<built-in function repr>",
        "reversed": "<class 'reversed'>",
        "round": "<built-in function round>",
        "set": "<class 'set'>",
        "setattr": "<built-in function setattr>",
        "slice": "<class 'slice'>",
        "sorted": "<built-in function sorted>",
        "staticmethod": "<class 'staticmethod'>",
        "str": "<class 'str'>",
        "sum": "<built-in function sum>",
        "super": "<class 'super'>",
        "tuple": "<class 'tuple'>",
        "type": "<class 'type'>",
        "vars": "<built-in function vars>",
        "zip": "<class 'zip'>"
    },
    "__cached__": "/home/web_dev/Include-python-script-inside-a-bash-script/__pycache__/logging_filehandler.cpython-37.pyc",
    "__doc__": null,
    "__file__": "/home/web_dev/Include-python-script-inside-a-bash-script/logging_filehandler.py",
    "__loader__": "<_frozen_importlib_external.SourceFileLoader object at 0x7f499a182978>",
    "__name__": "logging_filehandler",
    "__package__": "",
    "__spec__": "ModuleSpec(name='logging_filehandler', loader=<_frozen_importlib_external.SourceFileLoader object at 0x7f499a182978>, origin='/home/web_dev/Include-python-script-inside-a-bash-script/logging_filehandler.py')",
    "anything": "<function anything at 0x7f499ad46950>",
    "cars": [
        "Ford",
        "Volvo",
        "BMW"
    ],
    "exposed_request": null,
    "formatter": "<logging_filehandler.VerFormatter object at 0x7f499a182be0>",
    "handler": "<FileHandler /home/web_dev/Include-python-script-inside-a-bash-script/logging_auto_generated.log (DEBUG)>",
    "json_dumps_default": "<function json_dumps_default at 0x7f499ad46b70>",
    "keys_string": "<function keys_string at 0x7f499ad46a60>",
    "logger_custom_string": "<Logger custom_string (DEBUG)>",
    "logging": "<module 'logging' from '/usr/lib/python3.7/logging/__init__.py'>",
    "pp_odir": "<function pp_odir at 0x7f499ad46c80>",
    "pp_odir_getobject": "<function pp_odir_getobject at 0x7f499ad46bf8>",
    "pp_traceback": "<function pp_traceback at 0x7f499ad46d08>",
    "traceback": "<module 'traceback' from '/usr/lib/python3.7/traceback.py'>"
}

  File "<frozen importlib._bootstrap>", line 967, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 677, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 728, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/home/web_dev/Include-python-script-inside-a-bash-script/logging_filehandler.py", line 228, in <module>
    logger_custom_string.debug(pp_odir(locals(),traceback.format_stack(limit=5)))


    223: 
    224: # THIS WILL LOG ANY OBJECT
    225: logger_custom_string.debug(pp_odir(cars,traceback.format_stack(limit=5)))
    226: 
    227: # THIS WILL LOG ALL LOCALS
 228***: logger_custom_string.debug(pp_odir(locals(),traceback.format_stack(limit=5))) 

--------------------------------------------------------------------------------------------------------------
2020-08-30 14:37:28,803
XXXDEBUGXXX <module>() pyscript_auto_generated.py[:10] custom_string 
NONE_NO_REQUEST_ABS_PATH        
NONE_NO_REQUEST_METHOD
--------------------------------------------------------------------------------------------------------------

      5: from logging_filehandler import pp_odir
      6: from logging_filehandler import anything
      7: logger_custom_string = logging.getLogger("custom_string")
      8: 
      9: myPyString = "Do something on python"
  10***: logger_custom_string.debug(pp_odir(locals(),traceback.format_stack(limit=5)))
     11: print("myPyString")


{
    "__annotations__": {},
    "__builtins__": "<module 'builtins' (built-in)>",
    "__cached__": null,
    "__doc__": null,
    "__file__": "pyscript_auto_generated.py",
    "__loader__": "<_frozen_importlib_external.SourceFileLoader object at 0x7f499b974d68>",
    "__name__": "__main__",
    "__package__": null,
    "__spec__": null,
    "anything": "<function anything at 0x7f499ad46950>",
    "fitz": "<module 'fitz' from '/usr/lib/python3.7/site-packages/fitz/__init__.py'>",
    "logger_custom_string": "<Logger custom_string (DEBUG)>",
    "logging": "<module 'logging' from '/usr/lib/python3.7/logging/__init__.py'>",
    "myPyString": "Do something on python",
    "pp_odir": "<function pp_odir at 0x7f499ad46c80>",
    "re": "<module 're' from '/usr/lib/python3.7/re.py'>",
    "traceback": "<module 'traceback' from '/usr/lib/python3.7/traceback.py'>"
}

  File "pyscript_auto_generated.py", line 10, in <module>
    logger_custom_string.debug(pp_odir(locals(),traceback.format_stack(limit=5)))


      5: from logging_filehandler import pp_odir
      6: from logging_filehandler import anything
      7: logger_custom_string = logging.getLogger("custom_string")
      8: 
      9: myPyString = "Do something on python"
  10***: logger_custom_string.debug(pp_odir(locals(),traceback.format_stack(limit=5)))
     11: print("myPyString")

